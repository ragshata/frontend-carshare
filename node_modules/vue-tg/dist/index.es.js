import { defineComponent as p, onMounted as d, watch as b, onUnmounted as v, computed as u, openBlock as B, createBlock as A, resolveDynamicComponent as T, withCtx as S, ref as r, readonly as m } from "vue";
const We = /* @__PURE__ */ p({
  __name: "Alert",
  props: {
    message: {
      type: String,
      required: !0
    }
  },
  emits: ["close"],
  setup(e, { emit: o }) {
    const t = e, n = o, { showAlert: a } = k();
    return d(() => a(t.message, () => n("close"))), (i, s) => null;
  }
}), Se = /* @__PURE__ */ p({
  __name: "BackButton",
  props: {
    visible: { type: Boolean, default: !0 }
  },
  emits: ["click"],
  setup(e, { emit: o }) {
    const t = e, n = o, { showBackButton: a, onBackButtonClicked: i, hideBackButton: s } = Ne();
    return b(
      () => t.visible,
      (l) => {
        l ? a() : s();
      }
    ), i(() => n("click")), d(() => t.visible && a()), v(() => s()), (l, f) => null;
  }
}), Ce = /* @__PURE__ */ p({
  __name: "BiometricManager",
  emits: ["init"],
  setup(e, { emit: o }) {
    const t = o, { initBiometric: n } = Ze();
    return d(() => n(() => t("init"))), (a, i) => null;
  }
}), ye = /* @__PURE__ */ p({
  __name: "ClosingConfirmation",
  setup(e) {
    const { enableClosingConfirmation: o, disableClosingConfirmation: t } = tt();
    return d(() => o()), v(() => t()), (n, a) => null;
  }
}), ke = /* @__PURE__ */ p({
  __name: "Confirm",
  props: {
    message: { type: String, required: !0 }
  },
  emits: ["close"],
  setup(e, { emit: o }) {
    const t = e, n = o, { showConfirm: a } = k();
    return d(() => a(t.message, (i) => n("close", i))), (i, s) => null;
  }
}), we = /* @__PURE__ */ p({
  __name: "ExpandedViewport",
  props: {
    force: { type: Boolean, default: !1 }
  },
  setup(e) {
    const o = e, { isFeatureSupported: t } = g(), { onViewportChanged: n, expand: a, isExpanded: i, isVerticalSwipesEnabled: s } = _t();
    return t("DisableVerticalSwipes") ? b(
      () => o.force,
      (l) => {
        l && !i.value && a(), s.value = !l;
      },
      {
        immediate: !0
      }
    ) : n(({ isStateStable: l }) => {
      o.force && l && !i.value && a();
    }), d(() => a()), (l, f) => null;
  }
}), Me = /* @__PURE__ */ p({
  __name: "MainButton",
  props: {
    text: { type: String },
    color: { type: String },
    textColor: { type: String },
    visible: { type: Boolean, default: !0 },
    disabled: { type: Boolean, default: !1 },
    progress: { type: Boolean, default: !1 }
  },
  emits: ["click"],
  setup(e, { emit: o }) {
    const t = e, n = o, {
      setMainButtonParams: a,
      onMainButtonClicked: i,
      hideMainButton: s,
      showMainButtonProgress: l,
      hideMainButtonProgress: f
    } = pt();
    return b(
      () => t.text,
      (c) => {
        a({
          text: c
        });
      }
    ), b(
      () => t.color,
      (c) => {
        a({
          color: c
        });
      }
    ), b(
      () => t.textColor,
      (c) => {
        a({
          text_color: c
        });
      }
    ), b(
      () => t.visible,
      (c) => {
        a({
          is_visible: c
        });
      }
    ), b(
      () => t.disabled,
      (c) => {
        a({
          is_active: !c
        });
      }
    ), b(
      () => t.progress,
      (c) => {
        c ? l() : f();
      }
    ), i(() => n("click")), d(() => {
      t.progress ? l() : f(), a({
        text: t.text,
        text_color: t.textColor,
        color: t.color,
        is_active: !t.disabled,
        is_visible: t.visible
      });
    }), v(() => {
      f(), s();
    }), (c, Et) => null;
  }
}), xe = /* @__PURE__ */ p({
  __name: "Popup",
  props: {
    title: { type: String },
    message: { type: String, required: !0 },
    buttons: { type: Array }
  },
  emits: ["close"],
  setup(e, { emit: o }) {
    const t = e, n = o, { showPopup: a } = k();
    return d(
      () => a(
        {
          title: t.title,
          message: t.message,
          buttons: t.buttons
        },
        (i) => n("close", i)
      )
    ), (i, s) => null;
  }
}), Pe = /* @__PURE__ */ p({
  __name: "ScanQr",
  props: {
    text: { type: String }
  },
  emits: ["result"],
  setup(e, { emit: o }) {
    const t = e, n = o, { showScanQrPopup: a, closeScanQrPopup: i } = vt();
    return d(
      () => a(
        {
          text: t.text
        },
        (s) => n("result", s)
      )
    ), v(() => i()), (s, l) => null;
  }
}), _e = /* @__PURE__ */ p({
  __name: "SettingsButton",
  props: {
    visible: { type: Boolean, default: !0 }
  },
  emits: ["click"],
  setup(e, { emit: o }) {
    const t = e, n = o, { showSettingsButton: a, onSettingsButtonClicked: i, hideSettingsButton: s } = Mt();
    return b(
      () => t.visible,
      (l) => {
        l ? a() : s();
      }
    ), i(() => n("click")), d(() => t.visible && a()), v(() => s()), (l, f) => null;
  }
}), Ee = /* @__PURE__ */ p({
  __name: "ShareWidget",
  props: {
    url: {
      type: String,
      required: !0
    },
    comment: {
      type: String,
      default: null
    },
    size: {
      type: String,
      default: null
    },
    noLabel: {
      type: Boolean,
      default: !1
    },
    tag: {
      type: String,
      default: "div"
    }
  },
  setup(e) {
    const o = e, t = u(() => JSON.stringify(o));
    return (n, a) => (B(), A(T(e.tag), { key: t.value }, {
      default: S(() => [
        (B(), A(T("script"), {
          async: "",
          src: "https://telegram.org/js/telegram-widget.js?22",
          "data-telegram-share-url": e.url,
          "data-size": e.size,
          "data-comment": e.comment,
          "data-text": e.noLabel ? "notext" : null
        }, null, 8, ["data-telegram-share-url", "data-size", "data-comment", "data-text"]))
      ]),
      _: 1
    }));
  }
}), qe = /* @__PURE__ */ p({
  __name: "PostWidget",
  props: {
    url: {
      type: String,
      required: !0
    },
    width: {
      type: String,
      default: null
    },
    authorPhoto: {
      type: Boolean,
      default: null
    },
    color: {
      type: String,
      default: null
    },
    darkColor: {
      type: String,
      default: null
    },
    dark: {
      type: Boolean,
      default: null
    },
    tag: {
      type: String,
      default: "div"
    }
  },
  setup(e) {
    const o = e, t = u(() => JSON.stringify(o));
    return (n, a) => (B(), A(T(e.tag), { key: t.value }, {
      default: S(() => [
        (B(), A(T("script"), {
          async: "",
          src: "https://telegram.org/js/telegram-widget.js?22",
          "data-telegram-post": e.url,
          "data-width": e.width,
          "data-userpic": e.authorPhoto,
          "data-color": e.color,
          "data-dark-color": e.darkColor,
          "data-dark": e.dark
        }, null, 8, ["data-telegram-post", "data-width", "data-userpic", "data-color", "data-dark-color", "data-dark"]))
      ]),
      _: 1
    }));
  }
}), Re = /* @__PURE__ */ p({
  __name: "LoginWidget",
  props: {
    botUsername: {
      type: String,
      required: !0
    },
    redirectUrl: {
      type: String,
      default: null
    },
    size: {
      type: String,
      default: null
    },
    cornerRadius: {
      type: String,
      default: null
    },
    userPhoto: {
      type: Boolean,
      default: null
    },
    requestWrite: {
      type: Boolean,
      default: !1
    },
    tag: {
      type: String,
      default: "div"
    }
  },
  emits: ["auth"],
  setup(e, { emit: o }) {
    const t = e, n = u(() => JSON.stringify(t)), a = o;
    return d(() => {
      window.onTelegramAuth = (i) => a("auth", i);
    }), (i, s) => (B(), A(T(e.tag), { key: n.value }, {
      default: S(() => [
        (B(), A(T("script"), {
          async: "",
          src: "https://telegram.org/js/telegram-widget.js?22",
          "data-telegram-login": e.botUsername,
          "data-size": e.size,
          "data-radius": e.cornerRadius,
          "data-userpic": e.userPhoto,
          "data-request-access": e.requestWrite ? "write" : null,
          "data-onauth": e.redirectUrl ? null : "onTelegramAuth(user)",
          "data-auth-url": e.redirectUrl
        }, null, 8, ["data-telegram-login", "data-size", "data-radius", "data-userpic", "data-request-access", "data-onauth", "data-auth-url"]))
      ]),
      _: 1
    }));
  }
}), De = /* @__PURE__ */ p({
  __name: "DiscussionWidget",
  props: {
    url: {
      type: String,
      required: !0
    },
    commentsLimit: {
      type: Number,
      default: null
    },
    height: {
      type: String,
      default: null
    },
    color: {
      type: String,
      default: null
    },
    darkColor: {
      type: String,
      default: null
    },
    dark: {
      type: Boolean,
      default: null
    },
    colorful: {
      type: Boolean,
      default: null
    },
    tag: {
      type: String,
      default: "div"
    }
  },
  setup(e) {
    const o = e, t = u(() => JSON.stringify(o));
    return (n, a) => (B(), A(T(e.tag), { key: t.value }, {
      default: S(() => [
        (B(), A(T("script"), {
          async: "",
          src: "https://telegram.org/js/telegram-widget.js?22",
          "data-telegram-discussion": e.url,
          "data-comments-limit": e.commentsLimit,
          "data-height": e.height,
          "data-color": e.color,
          "data-dark-color": e.darkColor,
          "data-dark": e.dark,
          "data-colorful": e.colorful
        }, null, 8, ["data-telegram-discussion", "data-comments-limit", "data-height", "data-color", "data-dark-color", "data-dark", "data-colorful"]))
      ]),
      _: 1
    }));
  }
}), {
  initData: $e,
  initDataUnsafe: Ve,
  version: Ie,
  platform: Ue,
  isVersionAtLeast: j,
  sendData: Qe,
  close: He
} = Telegram.WebApp, N = r(!1), Le = (...e) => {
  Telegram.WebApp.ready(...e), N.value = !0;
}, J = (e) => Telegram.WebApp.platform === e, G = J("unknown"), ze = {
  ClosingConfirmation: "6.2",
  CloudStorage: "6.9",
  RequestWriteAccess: "6.9",
  RequestContact: "6.9",
  SettingsButton: "7.0",
  BiometricManager: "7.2",
  DisableVerticalSwipes: "7.7"
}, Oe = (e) => j(ze[e]), je = !G && Telegram.WebApp.initData === "";
function g() {
  return {
    initData: $e,
    initDataUnsafe: Ve,
    version: Ie,
    platform: Ue,
    isVersionAtLeast: j,
    onEvent: (o, t, n = { manual: !1 }) => {
      const { manual: a } = n, i = () => {
        Telegram.WebApp.onEvent(
          o,
          t
        );
      }, s = () => {
        Telegram.WebApp.offEvent(
          o,
          t
        );
      };
      return a ? i() : (d(i), v(s)), {
        off: s
      };
    },
    sendData: Qe,
    ready: Le,
    close: He,
    isReady: m(N),
    isPlatform: J,
    isPlatformUnknown: G,
    isFeatureSupported: Oe,
    canSendData: je
  };
}
const F = r(Telegram.WebApp.BackButton.isVisible);
function K() {
  F.value = Telegram.WebApp.BackButton.isVisible;
}
function M(...e) {
  Telegram.WebApp.BackButton.show(...e), K();
}
function x(...e) {
  Telegram.WebApp.BackButton.hide(...e), K();
}
function Ne() {
  const { onEvent: e } = g(), o = (t, n) => e("backButtonClicked", t, n);
  return {
    isBackButtonVisible: u({
      get() {
        return F.value;
      },
      set(t) {
        t ? M() : x();
      }
    }),
    onBackButtonClicked: o,
    showBackButton: M,
    hideBackButton: x
  };
}
const {
  init: Je,
  requestAccess: Ge,
  authenticate: Fe,
  updateBiometricToken: Ke,
  openSettings: Xe
} = Telegram.WebApp.BiometricManager, X = r(Telegram.WebApp.BiometricManager.isInited), Y = r(
  Telegram.WebApp.BiometricManager.isBiometricAvailable
), Z = r(Telegram.WebApp.BiometricManager.biometricType), ee = r(
  Telegram.WebApp.BiometricManager.isAccessRequested
), te = r(
  Telegram.WebApp.BiometricManager.isAccessGranted
), ne = r(
  Telegram.WebApp.BiometricManager.isAccessGranted
), oe = r(Telegram.WebApp.BiometricManager.deviceId);
function Ye() {
  X.value = Telegram.WebApp.BiometricManager.isInited, Y.value = Telegram.WebApp.BiometricManager.isBiometricAvailable, Z.value = Telegram.WebApp.BiometricManager.biometricType, ee.value = Telegram.WebApp.BiometricManager.isAccessRequested, te.value = Telegram.WebApp.BiometricManager.isAccessGranted, oe.value = Telegram.WebApp.BiometricManager.deviceId, ne.value = Telegram.WebApp.BiometricManager.isBiometricTokenSaved;
}
function Ze() {
  const { onEvent: e } = g(), o = (a, i) => e("biometricManagerUpdated", a, i), t = (a, i) => e("biometricAuthRequested", a, i), n = (a, i) => e("biometricTokenUpdated", a, i);
  return o(Ye), {
    isBiometricInited: m(X),
    isBiometricAvailable: m(Y),
    biometricType: m(Z),
    isBiometricAccessRequested: m(ee),
    isBiometricAccessGranted: m(te),
    isBiometricTokenSaved: m(ne),
    biometricDeviceId: m(oe),
    initBiometric: Je,
    requestBiometricAccess: Ge,
    authenticateBiometric: Fe,
    updateBiometricToken: Ke,
    openBiometricSettings: Xe,
    onBiometricManagerUpdated: o,
    onBiometricAuthRequested: t,
    onBiometricTokenUpdated: n
  };
}
const { readTextFromClipboard: et } = Telegram.WebApp;
function Rt() {
  const { onEvent: e } = g();
  return {
    readTextFromClipboard: et,
    onClipboardTextReceived: (t, n) => e("clipboardTextReceived", t, n)
  };
}
const ae = r(
  Telegram.WebApp.isClosingConfirmationEnabled
);
function ie() {
  ae.value = Telegram.WebApp.isClosingConfirmationEnabled;
}
function P(...e) {
  Telegram.WebApp.enableClosingConfirmation(...e), ie();
}
function _(...e) {
  Telegram.WebApp.disableClosingConfirmation(...e), ie();
}
function tt() {
  return {
    isClosingConfirmationEnabled: u({
      get() {
        return ae.value;
      },
      set(e) {
        e ? P() : _();
      }
    }),
    enableClosingConfirmation: P,
    disableClosingConfirmation: _
  };
}
const W = Telegram.WebApp.CloudStorage;
function nt(e, o) {
  return new Promise((t, n) => {
    W.setItem(e, o, (a, i) => {
      a && n(a), t(i);
    });
  });
}
function ot(e) {
  return new Promise((o, t) => {
    W.getItem(e, (n, a) => {
      n && t(n), o(a);
    });
  });
}
function at(e) {
  return new Promise((o, t) => {
    W.getItems(e, (n, a) => {
      n && t(n), o(a);
    });
  });
}
function it(e) {
  return new Promise((o, t) => {
    W.removeItem(e, (n, a) => {
      n && t(n), o(a);
    });
  });
}
function rt(e) {
  return new Promise((o, t) => {
    W.removeItems(e, (n, a) => {
      n && t(n), o(a);
    });
  });
}
function st() {
  return new Promise((e, o) => {
    W.getKeys((t, n) => {
      t && o(t), e(n);
    });
  });
}
function Dt() {
  return {
    setStorageItem: nt,
    getStorageItem: ot,
    getStorageItems: at,
    removeStorageItem: it,
    removeStorageItems: rt,
    getStorageKeys: st
  };
}
const { impactOccurred: ct, notificationOccurred: lt, selectionChanged: ut } = Telegram.WebApp.HapticFeedback;
function $t() {
  return {
    impactOccurred: ct,
    notificationOccurred: lt,
    selectionChanged: ut
  };
}
const re = r(Telegram.WebApp.MainButton.text), se = r(Telegram.WebApp.MainButton.color), ce = r(Telegram.WebApp.MainButton.textColor), le = r(Telegram.WebApp.MainButton.isVisible), ue = r(Telegram.WebApp.MainButton.isActive), pe = r(
  Telegram.WebApp.MainButton.isProgressVisible
);
function h() {
  re.value = Telegram.WebApp.MainButton.text, se.value = Telegram.WebApp.MainButton.color, ce.value = Telegram.WebApp.MainButton.textColor, le.value = Telegram.WebApp.MainButton.isVisible, ue.value = Telegram.WebApp.MainButton.isActive, pe.value = Telegram.WebApp.MainButton.isProgressVisible;
}
function E(...e) {
  Telegram.WebApp.MainButton.setText(...e), h();
}
function q(...e) {
  Telegram.WebApp.MainButton.show(...e), h();
}
function R(...e) {
  Telegram.WebApp.MainButton.hide(...e), h();
}
function D(...e) {
  Telegram.WebApp.MainButton.enable(...e), h();
}
function $(...e) {
  Telegram.WebApp.MainButton.disable(...e), h();
}
function V(...e) {
  Telegram.WebApp.MainButton.showProgress(...e), h();
}
function I(...e) {
  Telegram.WebApp.MainButton.hideProgress(...e), h();
}
function y(...e) {
  Telegram.WebApp.MainButton.setParams(...e), h();
}
function pt() {
  const { onEvent: e } = g(), o = (t, n) => e("mainButtonClicked", t, n);
  return {
    mainButtonText: u({
      get() {
        return re.value;
      },
      set(t) {
        E(t);
      }
    }),
    mainButtonColor: u({
      get() {
        return se.value;
      },
      set(t) {
        y({
          color: t
        });
      }
    }),
    mainButtonTextColor: u({
      get() {
        return ce.value;
      },
      set(t) {
        y({
          text_color: t
        });
      }
    }),
    isMainButtonVisible: u({
      get() {
        return le.value;
      },
      set(t) {
        t ? q() : R();
      }
    }),
    isMainButtonActive: u({
      get() {
        return ue.value;
      },
      set(t) {
        t ? D() : $();
      }
    }),
    isMainButtonProgressVisible: u({
      get() {
        return pe.value;
      },
      set(t) {
        t ? V() : I();
      }
    }),
    setMainButtonText: E,
    onMainButtonClicked: o,
    showMainButton: q,
    hideMainButton: R,
    enableMainButton: D,
    disableMainButton: $,
    showMainButtonProgress: V,
    hideMainButtonProgress: I,
    setMainButtonParams: y
  };
}
const { switchInlineQuery: mt, openLink: gt, openTelegramLink: dt, openInvoice: bt } = Telegram.WebApp;
function Vt() {
  const { onEvent: e } = g();
  return {
    switchInlineQuery: mt,
    openLink: gt,
    openTelegramLink: dt,
    openInvoice: bt,
    onInvoiceClosed: (t, n) => e("invoiceClosed", t, n)
  };
}
const { showPopup: ft, showAlert: Bt, showConfirm: At } = Telegram.WebApp;
function k() {
  const { onEvent: e } = g();
  return {
    showPopup: ft,
    showAlert: Bt,
    showConfirm: At,
    onPopupClosed: (t, n) => e("popupClosed", t, n)
  };
}
const { showScanQrPopup: Tt, closeScanQrPopup: ht } = Telegram.WebApp;
function vt() {
  const { onEvent: e } = g();
  return {
    showScanQrPopup: Tt,
    closeScanQrPopup: ht,
    onQrTextReceived: (n, a) => e("qrTextReceived", n, a),
    onScanQrPopupClosed: (n, a) => e("scanQrPopupClosed", n, a)
  };
}
const { requestContact: Wt, requestWriteAccess: St } = Telegram.WebApp;
function It() {
  const { onEvent: e } = g();
  return {
    requestContact: Wt,
    onContactRequested: (n, a) => e("contactRequested", n, a),
    requestWriteAccess: St,
    onWriteAccessRequested: (n, a) => e("writeAccessRequested", n, a)
  };
}
const { initData: Ct, initDataUnsafe: yt, sendData: kt, close: wt } = g();
function Ut(e, o) {
  const t = o.serialize ?? JSON.stringify, n = r(""), a = (s) => {
    n.value = s, console.error(s);
  }, i = r(!1);
  return {
    error: n,
    isLoading: i,
    execute: () => {
      kt(t(e)), setTimeout(
        () => a(
          "Telegram.WebApp.sendData is only available for custom keyboards."
        ),
        1e3
      );
    },
    executeHttp: async (s, l = {}) => {
      const f = l.closeAfter ?? !0;
      i.value = !0;
      try {
        const c = await fetch(s, {
          method: "POST",
          body: JSON.stringify({
            initData: Ct,
            initDataUnsafe: yt,
            data: t(e)
          })
        });
        return c.ok || a(`${c.status} ${c.statusText}`), c.ok && f && wt(), c;
      } catch (c) {
        a(String(c));
      } finally {
        i.value = !1;
      }
    }
  };
}
const me = r(Telegram.WebApp.SettingsButton.isVisible);
function ge() {
  me.value = Telegram.WebApp.SettingsButton.isVisible;
}
function U(...e) {
  Telegram.WebApp.SettingsButton.show(...e), ge();
}
function Q(...e) {
  Telegram.WebApp.SettingsButton.hide(...e), ge();
}
function Mt() {
  const { onEvent: e } = g(), o = (t, n) => e("settingsButtonClicked", t, n);
  return {
    isSettingsButtonVisible: u({
      get() {
        return me.value;
      },
      set(t) {
        t ? U() : Q();
      }
    }),
    onSettingsButtonClicked: o,
    showSettingsButton: U,
    hideSettingsButton: Q
  };
}
function xt(e, o) {
  Telegram.WebApp.shareToStory(e, o);
}
function Qt() {
  return {
    shareToStory: xt
  };
}
const de = r(Telegram.WebApp.colorScheme), be = r(Telegram.WebApp.themeParams), fe = r(Telegram.WebApp.headerColor), Be = r(Telegram.WebApp.backgroundColor);
function w() {
  de.value = Telegram.WebApp.colorScheme, be.value = {
    ...Telegram.WebApp.themeParams
  }, fe.value = Telegram.WebApp.headerColor, Be.value = Telegram.WebApp.backgroundColor;
}
function H(...e) {
  Telegram.WebApp.setHeaderColor(...e), w();
}
function L(...e) {
  Telegram.WebApp.setBackgroundColor(...e), w();
}
function Ht() {
  const { onEvent: e } = g(), o = (t, n) => e("themeChanged", t, n);
  return o(w), {
    colorScheme: m(de),
    themeParams: m(be),
    headerColor: u({
      get() {
        return fe.value;
      },
      set(t) {
        H(t);
      }
    }),
    backgroundColor: u({
      get() {
        return Be.value;
      },
      set(t) {
        L(t);
      }
    }),
    setHeaderColor: H,
    setBackgroundColor: L,
    onThemeChanged: o
  };
}
const Ae = r(Telegram.WebApp.isExpanded), Te = r(Telegram.WebApp.viewportHeight), he = r(Telegram.WebApp.viewportStableHeight), ve = r(Telegram.WebApp.isVerticalSwipesEnabled);
function C() {
  Ae.value = Telegram.WebApp.isExpanded, Te.value = Telegram.WebApp.viewportHeight, he.value = Telegram.WebApp.viewportStableHeight, ve.value = Telegram.WebApp.isVerticalSwipesEnabled;
}
function Pt(...e) {
  Telegram.WebApp.expand(...e), C();
}
const z = (...e) => {
  Telegram.WebApp.enableVerticalSwipes(...e), C();
}, O = (...e) => {
  Telegram.WebApp.disableVerticalSwipes(...e), C();
};
function _t() {
  const { onEvent: e } = g(), o = (t, n) => e("viewportChanged", t, n);
  return o(C), {
    isExpanded: m(Ae),
    viewportHeight: m(Te),
    viewportStableHeight: m(he),
    expand: Pt,
    onViewportChanged: o,
    isVerticalSwipesEnabled: u({
      get() {
        return ve.value;
      },
      set(t) {
        t ? z() : O();
      }
    }),
    enableVerticalSwipes: z,
    disableVerticalSwipes: O
  };
}
const Lt = {
  install(e) {
    e.component("TgAlert", We), e.component("TgBackButton", Se), e.component("TgBiometricManager", Ce), e.component("TgClosingConfirmation", ye), e.component("TgConfirm", ke), e.component("TgExpandedViewport", we), e.component("TgMainButton", Me), e.component("TgPopup", xe), e.component("TgScanQr", Pe), e.component("TgSettingsButton", _e), e.component("TgShareWidget", Ee), e.component("TgPostWidget", qe), e.component("TgLoginWidget", Re), e.component("TgDiscussionWidget", De);
  }
};
export {
  We as Alert,
  Se as BackButton,
  Ce as BiometricManager,
  ye as ClosingConfirmation,
  ke as Confirm,
  De as DiscussionWidget,
  we as ExpandedViewport,
  Re as LoginWidget,
  Me as MainButton,
  xe as Popup,
  qe as PostWidget,
  Pe as ScanQr,
  _e as SettingsButton,
  Ee as ShareWidget,
  Lt as VueTelegramPlugin,
  g as useWebApp,
  Ne as useWebAppBackButton,
  Ze as useWebAppBiometricManager,
  Rt as useWebAppClipboard,
  tt as useWebAppClosingConfirmation,
  Dt as useWebAppCloudStorage,
  $t as useWebAppHapticFeedback,
  pt as useWebAppMainButton,
  Vt as useWebAppNavigation,
  k as useWebAppPopup,
  vt as useWebAppQrScanner,
  It as useWebAppRequests,
  Ut as useWebAppSendData,
  Mt as useWebAppSettingsButton,
  Qt as useWebAppShare,
  Ht as useWebAppTheme,
  _t as useWebAppViewport
};
